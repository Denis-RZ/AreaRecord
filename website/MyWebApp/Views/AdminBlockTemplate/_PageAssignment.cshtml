@using MyWebApp.Models
@{
    var selectedPages = ViewBag.SelectedPageIds as List<int> ?? new List<int>();
    var selectedZone = ViewBag.SelectedZone as string ?? string.Empty;
    var selectedRole = ViewBag.SelectedRole as string ?? string.Empty;
}
<div class="block-assignment">
    <h3>Page Assignment</h3>
    <div>
        <label>Pages</label>
        <input type="text" id="page-display" readonly />
        <select id="page-select" name="pageIds" multiple size="5">
            <option value="0" selected="@(selectedPages.Contains(0))">All Pages</option>
            @foreach (var p in ViewBag.Pages as List<Page>)
            {
                <option value="@p.Id" selected="@(selectedPages.Contains(p.Id))">@p.Slug</option>
            }
        </select>
    </div>
    <div>
        <label>Zone</label>
        <select id="zone-select" name="zone">
            @foreach (var z in ViewBag.Zones as List<string>)
            {
                <option value="@z" selected="@(selectedZone == z)">@z</option>
            }
        </select>
    </div>
    <div>
        <label>Role</label>
        <select name="role">
            <option value="" selected="@(string.IsNullOrEmpty(selectedRole))">(none)</option>
            @foreach (var r in ViewBag.Roles as List<Role>)
            {
                <option value="@r.Name" selected="@(selectedRole == r.Name)">@r.Name</option>
            }
        </select>
    </div>
</div>
@section Scripts {
<script>
    const select = document.getElementById('page-select');
    const display = document.getElementById('page-display');
    function updateDisplay() {
        const names = Array.from(select.selectedOptions).map(o => o.text);
        display.value = names.join(', ');
    }
    select.addEventListener('change', updateDisplay);
    updateDisplay();
</script>
}
